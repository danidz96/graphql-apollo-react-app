{"version":3,"sources":["components/LaunchItem/LaunchItem.js","components/Launches/Launches.js","components/Launch/Launch.js","App.js","serviceWorker.js","index.js"],"names":["Title","Typography","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","span","level","color","format","to","GET_LAUNCHES","gql","Launches","useQuery","loading","error","data","Fragment","launches","map","key","GET_LAUNCH","Launch","props","match","params","parseInt","variables","Item","label","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oZAMQA,G,OAAUC,IAAVD,OA0BOE,EAxBI,SAAC,GAAoF,IAAD,IAAjFC,OAAUC,EAAuE,EAAvEA,cAAeC,EAAwD,EAAxDA,aAAcC,EAA0C,EAA1CA,kBAAmBC,EAAuB,EAAvBA,eAC/E,OACC,kBAAC,IAAD,CAAMC,UAAU,QACf,kBAAC,IAAD,CAAKC,KAAM,IACV,yBAAKD,UAAU,eACd,kBAACR,EAAD,CAAOU,MAAO,GAAd,YAA2BL,GAC3B,yBAAKG,UAAU,gBACd,kBAAC,IAAD,CAAKG,MAAOJ,EAAiB,QAAU,OAAQA,EAAiB,UAAY,UAG9E,2BACC,kBAAC,IAAD,CAAQK,OAAO,oBAAoBN,IAEpC,2BAAIC,IAEL,kBAAC,IAAD,CAAKE,KAAM,GACV,kBAAC,IAAD,CAAMI,GAAE,kBAAaT,IACpB,kBAAC,IAAD,2B,kNCpBL,IAAMU,EAAeC,YAAH,KA0BHC,EAfE,WAAO,IAAD,EACWC,YAASH,GAAlCI,EADc,EACdA,QAASC,EADK,EACLA,MAAOC,EADF,EACEA,KAExB,OACC,kBAAC,IAAMC,SAAP,KACC,wCACCH,GAAW,0CACVA,IACAC,GACDC,EAAKE,SAASC,IAAI,SAACpB,GAAD,OAAY,kBAAC,EAAD,CAAYqB,IAAKrB,EAAOE,aAAcF,OAAQA,MAC5EgB,GAAS,qD,qXCnBb,IAAMM,EAAaV,YAAH,KAsDDW,EArCA,SAACC,GAAW,IACpBvB,EAAkBuB,EAAMC,MAAMC,OAA9BzB,cACNA,EAAgB0B,SAAS1B,GAFA,MAGQa,YAASQ,EAAY,CAAEM,UAAW,CAAE3B,mBAA7Dc,EAHiB,EAGjBA,QAAgBE,GAHC,EAGRD,MAHQ,EAGDC,MACxB,OACC,kBAAC,IAAMC,SAAP,KACEH,GAAW,0CAEVA,GACD,kBAAC,IAAMG,SAAP,KACC,wCACU,8BAAOD,EAAKjB,OAAOE,eAE7B,8CACA,kBAAC,IAAD,KACC,kBAAC,IAAa2B,KAAd,CAAmBC,MAAM,iBAAiBb,EAAKjB,OAAOC,eACtD,kBAAC,IAAa4B,KAAd,CAAmBC,MAAM,eAAeb,EAAKjB,OAAO+B,aACpD,kBAAC,IAAaF,KAAd,CAAmBC,MAAM,kBAAkBb,EAAKjB,OAAOI,gBACvD,kBAAC,IAAayB,KAAd,CAAmBC,MAAM,qBACxB,kBAAC,IAAD,CAAQrB,OAAO,oBAAoBQ,EAAKjB,OAAOG,qBAGjD,8CACA,kBAAC,IAAD,KACC,kBAAC,IAAa0B,KAAd,CAAmBC,MAAM,aAAab,EAAKjB,OAAOgC,OAAOC,WACzD,kBAAC,IAAaJ,KAAd,CAAmBC,MAAM,eAAeb,EAAKjB,OAAOgC,OAAOE,aAC3D,kBAAC,IAAaL,KAAd,CAAmBC,MAAM,eAAeb,EAAKjB,OAAOgC,OAAOG,cAE5D,kBAAC,IAAD,CAAMzB,GAAE,KACP,kBAAC,IAAD,iBC7CA0B,G,OAAS,IAAIC,IAAa,CAC/BC,IAAK,cAiBSC,EAdH,WACX,OACC,kBAAC,IAAD,CAAgBH,OAAQA,GACvB,kBAAC,IAAD,KACC,yBAAK/B,UAAU,OACd,sCACA,kBAAC,IAAD,CAAOmC,OAAK,EAACC,KAAK,IAAIC,UAAW7B,IACjC,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,yBAAyBC,UAAWnB,QCPvCoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrB,MACvB,2DCZNsB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.01ba5568.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, Col, Button, Row, Tag, Typography } from 'antd';\r\nimport Moment from 'react-moment';\r\nimport { Link } from 'react-router-dom';\r\nimport './LaunchItem.css';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst LaunchItem = ({ launch: { flight_number, mission_name, launch_date_local, launch_success } }) => {\r\n\treturn (\r\n\t\t<Card className=\"card\">\r\n\t\t\t<Col span={20}>\r\n\t\t\t\t<div className=\"missionData\">\r\n\t\t\t\t\t<Title level={2}>Mission: {mission_name}</Title>\r\n\t\t\t\t\t<div className=\"statusBudget\">\r\n\t\t\t\t\t\t<Tag color={launch_success ? 'green' : 'red'}>{launch_success ? 'Success' : 'Fail'}</Tag>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<Moment format=\"DD-MM-YYYY HH:mm\">{launch_date_local}</Moment>\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>{launch_success}</p>\r\n\t\t\t</Col>\r\n\t\t\t<Col span={4}>\r\n\t\t\t\t<Link to={`/launch/${flight_number}`}>\r\n\t\t\t\t\t<Button>Launch Details</Button>\r\n\t\t\t\t</Link>\r\n\t\t\t</Col>\r\n\t\t</Card>\r\n\t);\r\n};\r\n\r\nexport default LaunchItem;\r\n","import React from 'react';\r\nimport { gql } from 'apollo-boost';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport LaunchItem from '../LaunchItem/LaunchItem';\r\n\r\nconst GET_LAUNCHES = gql`\r\n\tquery GetLaunches {\r\n\t\tlaunches {\r\n\t\t\tflight_number\r\n\t\t\tmission_name\r\n\t\t\tlaunch_date_local\r\n\t\t\tlaunch_success\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst Launches = () => {\r\n\tconst { loading, error, data } = useQuery(GET_LAUNCHES);\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<h1>Launches</h1>\r\n\t\t\t{loading && <p>Loading...</p>}\r\n\t\t\t{!loading &&\r\n\t\t\t\t!error &&\r\n\t\t\t\tdata.launches.map((launch) => <LaunchItem key={launch.mission_name} launch={launch} />)}\r\n\t\t\t{error && <p>Something went wrong</p>}\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default Launches;\r\n","import React from 'react';\r\nimport { gql } from 'apollo-boost';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Link } from 'react-router-dom';\r\nimport { Descriptions, Button } from 'antd';\r\nimport Moment from 'react-moment';\r\n\r\nconst GET_LAUNCH = gql`\r\n\tquery GetLaunch($flight_number: Int!) {\r\n\t\tlaunch(flight_number: $flight_number) {\r\n\t\t\tflight_number\r\n\t\t\tmission_name\r\n\t\t\tlaunch_year\r\n\t\t\tlaunch_success\r\n\t\t\tlaunch_date_local\r\n\t\t\trocket {\r\n\t\t\t\trocket_id\r\n\t\t\t\trocket_name\r\n\t\t\t\trocket_type\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst Launch = (props) => {\r\n\tlet { flight_number } = props.match.params;\r\n\tflight_number = parseInt(flight_number);\r\n\tconst { loading, error, data } = useQuery(GET_LAUNCH, { variables: { flight_number } });\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{loading && <p>Loading...</p>}\r\n\r\n\t\t\t{!loading && (\r\n\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t<h1>\r\n\t\t\t\t\t\tMission: <span>{data.launch.mission_name}</span>\r\n\t\t\t\t\t</h1>\r\n\t\t\t\t\t<h2>Launch Details</h2>\r\n\t\t\t\t\t<Descriptions>\r\n\t\t\t\t\t\t<Descriptions.Item label=\"Flight Number\">{data.launch.flight_number}</Descriptions.Item>\r\n\t\t\t\t\t\t<Descriptions.Item label=\"Launch Year\">{data.launch.launch_year}</Descriptions.Item>\r\n\t\t\t\t\t\t<Descriptions.Item label=\"Launch Success\">{data.launch.launch_success}</Descriptions.Item>\r\n\t\t\t\t\t\t<Descriptions.Item label=\"Launch Date Local\">\r\n\t\t\t\t\t\t\t<Moment format=\"DD-MM-YYYY HH:mm\">{data.launch.launch_date_local}</Moment>\r\n\t\t\t\t\t\t</Descriptions.Item>\r\n\t\t\t\t\t</Descriptions>\r\n\t\t\t\t\t<h2>Rocket Details</h2>\r\n\t\t\t\t\t<Descriptions>\r\n\t\t\t\t\t\t<Descriptions.Item label=\"Rocket ID\">{data.launch.rocket.rocket_id}</Descriptions.Item>\r\n\t\t\t\t\t\t<Descriptions.Item label=\"Rocket Name\">{data.launch.rocket.rocket_name}</Descriptions.Item>\r\n\t\t\t\t\t\t<Descriptions.Item label=\"Rocket Type\">{data.launch.rocket.rocket_type}</Descriptions.Item>\r\n\t\t\t\t\t</Descriptions>\r\n\t\t\t\t\t<Link to={`/`}>\r\n\t\t\t\t\t\t<Button>Back</Button>\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</React.Fragment>\r\n\t\t\t)}\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default Launch;\r\n","import React from 'react';\r\nimport ApolloClient from 'apollo-boost/';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Launches from './components/Launches/Launches';\r\nimport Launch from './components/Launch/Launch';\r\nimport './App.css';\r\n\r\nconst client = new ApolloClient({\r\n\turi: '/graphql'\r\n});\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<ApolloProvider client={client}>\r\n\t\t\t<Router>\r\n\t\t\t\t<div className=\"App\">\r\n\t\t\t\t\t<h1>SpaceX</h1>\r\n\t\t\t\t\t<Route exact path=\"/\" component={Launches} />\r\n\t\t\t\t\t<Route exact path=\"/launch/:flight_number\" component={Launch} />\r\n\t\t\t\t</div>\r\n\t\t\t</Router>\r\n\t\t</ApolloProvider>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}